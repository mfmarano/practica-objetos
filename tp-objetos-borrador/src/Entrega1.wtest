import ObjetosTests.*
import BarrileteCosmico.barrileteCosmico
import Localidad.*
import Viaje.*
import Localidad.vacunas

describe "Entrega 1 Tests" {
	
	method initialize() {
		barrileteCosmico.agregarLocalidad(garlicSea)
		barrileteCosmico.agregarLocalidad(silverSea)
		barrileteCosmico.agregarLocalidad(lastToninas)
		barrileteCosmico.agregarLocalidad(goodAirs)
		barrileteCosmico.agregarUsuario(pabloHari)
		barrileteCosmico.agregarTransporte(avion)
		vacunas.add("Vacuna Gripal")
		vacunas.add("Vacuna B")
	}
	
	test "los destinos más importantes de Barrilete Cósmico son Garlic´s Sea y Last Toninas" {
		
		const destinos = #{ garlicSea, lastToninas }
		assert.equals(destinos, barrileteCosmico.localidadesMasImportantes())	
	
	}
	
	test "Se aplica 25% descuento a Last Toninas y su precio disminuye" {
		
		lastToninas.aplicarDescuento(25)
		assert.equals(2625, lastToninas.precio())	
	
	}
	
	test "Se aplica 25% descuento a Last Toninas y requiere Certificado de descuento" {
		
		lastToninas.aplicarDescuento(25)
		assert.that(lastToninas.equipajeImprescindible().contains("Certificado de descuento"))	
	
	}
	
	test "Silver's Sea no es un destino peligroso" {
		
		assert.notThat(silverSea.esPeligrosa())	
	
	}
	
	test "Barrilete Cósmico aplica descuento de 15% a todos sus destinos, sus precios se reducen y todos poseen el certificado de descuento" {
	
		barrileteCosmico.aplicarDescuentosALocalidades(15)
		assert.equals(2125, garlicSea.precio())
		assert.equals(1147.5, silverSea.precio())
		assert.equals(2975, lastToninas.precio())
		assert.equals(1275, goodAirs.precio())
		assert.that(garlicSea.equipajeImprescindible().contains("Certificado de descuento"))
		assert.that(silverSea.equipajeImprescindible().contains("Certificado de descuento"))
		assert.that(lastToninas.equipajeImprescindible().contains("Certificado de descuento"))
		assert.that(goodAirs.equipajeImprescindible().contains("Certificado de descuento"))
	
	}
	
	test "Last Toninas es el unico destino peligroso hasta el momento" {
		
		const destinoPeligroso = #{ lastToninas }
		assert.equals(destinoPeligroso, barrileteCosmico.localidades().filter{ localidad => localidad.esPeligrosa() })
		
	}
	
	test "Barrilete Cósmico es una empresa extrema" {
		
		assert.that(barrileteCosmico.esEmpresaExtrema())
		
	}
	
	test "Last Toninas, Garlic's sea, Good Airs y Silver's Sea es la carta de destinos de Barrilete Cosmico" {
		
		const cartaDeLocalidades = #{"Last Toninas", "Garlic's Sea", "Good Airs", "Silver's Sea"}
		assert.equals(cartaDeLocalidades, barrileteCosmico.cartaDeLocalidades().asSet())
		
	}
	
	test "PHari tiene 10 kilómetros" {
		
		// basado en Entrega 2, pabloHari tiene un viaje de goodAirs (km = 0) a lastToninas (km = 10),
		assert.equals(10, pabloHari.kilometros())
		
	}
	
	test "PHari puede volar a Silver's Sea" {
		
		assert.that(barrileteCosmico.puedeRealizarViaje(pabloHari, silverSea, avion))
		
	}
	
	test "PHari puede volar a Silver's Sea y disminuye su saldo a 50" {
		
		// basado en Entrega 2, pabloHari viaja desde lastToninas a silverSea (10km) en avion
		// precio del viaje: costo de avion (10) * distancia (10) + precio de silverSea (1350) = 1450
		
		pabloHari.viajarA(silverSea)
		assert.equals(50, pabloHari.saldo())
		
	}
	
	test "PHari puede volar a Silver's Sea y el viaje se agrega a su historial" {
		
		pabloHari.viajarA(silverSea)
		assert.that(pabloHari.viajesRealizados().any{ viaje => viaje.destino().equals(silverSea) } )
		
	}
	
}